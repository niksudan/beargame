<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBearIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Local variables

// Whether the bear can be controlled
// If set to false, the bear will no longer respond to new destinations
// However it will still move towards any existing one
isActive = true;

// The new destination the bear will want to go to
destination = 0;

// Whether or not the bear has reached its destination
didReachDest = true;

// The maximum distance away from the destination the bear has to be in order for it to be marked as 'reached'
destRadius = 4;

// Whether or not a zone was clicked
// This is set to false when the transition occurs or the dialogue spawns
didClickZone = false;

// Whether the currently clicked zone is a transition zone
zoneIsTransition = false;

// The state in which the bear should travel to
// This is only put into affect when the destination has been reached
transitionState = 0;

// The list of phrases the dialogue will go through
phrases = ds_list_create();

// The current index of dialogue the bear is currently on
phraseIndex = 0;

// Whether or not the dialogue should be shown
showPhrases = false;

spriteDirection = 1;
image_speed = 0.15;
moveSpeed = 0.5;

mouseBeforeX = mouse_x;
mouseBeforeY = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Positioning handling

x = controller.bearX;
spriteDirection = controller.bearSpriteDirection;
show_debug_message('Bear spawned at position ' + string(x));

if (controller.bearDestination != x) {
    set_destination(controller.bearDestination);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle movement

// Listen for a new destination
if (isActive) {
    if (controller.didClick) {
        set_destination(mouse_x);
    }
}

// Check if at destination
if (!didReachDest) {
    var distanceToDest = abs(destination - x);
    image_xscale = spriteDirection;
    if (distanceToDest &lt;= destRadius) {
        didReachDest = true;
        sprite_index = sprBearIdle;
    } else {
        x += spriteDirection * moveSpeed;
        if (sprite_index == sprBearIdle) {
            image_index = 0;
            sprite_index = sprBearWalk;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle dialogue and transitions

// Trigger phrases/transition when destination has been reached
if (didReachDest &amp;&amp; didClickZone) {
    didClickZone = false;
    if (!zoneIsTransition) {
        showPhrases = true;
        with (objQuestion) {
            instance_destroy();
        }
        show_debug_message('Triggering dialogue');
    } else {
        set_state(transitionState);
        show_debug_message('Transitioning to state ' + string(transitionState));
    }
}

// Trigger progression of phrases
if (showPhrases &amp;&amp; !isActive) {
    var phraseCount = ds_list_size(phrases);
    if (controller.didClick) {
        phraseIndex += 1;
        controller.currentPhraseLength = 0;
        show_debug_message(string(phraseIndex) + ' of ' + string(phraseCount) + ' completed');
        if (phraseIndex &gt;= phraseCount) {
            isActive = true;
            showPhrases = false;
            exit;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle click zones

if (isActive &amp;&amp; controller.didClick) {
    for (var i = 0; i &lt; ds_list_size(controller.clickZones); i += 1) {
        var zone = ds_list_find_value(controller.clickZones, i);
        if (within_bounds(mouse_x, mouse_y, zone[0], zone[1], zone[2], zone[3])) {
            click_zone(false);
            phrases = zone[4];
            break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle transition zones

// Only perform this logic if the mouse position has changed since the last check
if (mouseBeforeX != mouse_x || mouseBeforeY != mouse_y) {
    set_cursor(sprCursor, 0);
    
    if (!didClickZone) {
        transitionState = 0;
    }
    
    for (var i = 0; i &lt; ds_list_size(controller.transitionZones); i += 1) {
        var zone = ds_list_find_value(controller.transitionZones, i);
        if (within_bounds(mouse_x, mouse_y, zone[0], zone[1], zone[2], zone[3])) {
            set_cursor(sprArrow, zone[5]);
            if (!didClickZone) {
                transitionState = zone[4];
            }
            break;
        }
    }
}

// Activate transitioning if clicked on the zone
if (isActive &amp;&amp; controller.didClick &amp;&amp; transitionState != 0) {
    click_zone(true);
}

// Update the mouse position
mouseBeforeX = mouse_x;
mouseBeforeY = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
