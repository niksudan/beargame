<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global variables

isDebugMode = false;

state = 0;
didClick = false;
clickZones = ds_list_create();
transitionZones = ds_list_create();

bearX = 0;
bearDestination = 0;
bearSpriteDirection = 1;

cursorSprite = sprCursor;
cursorAngle = 0;

didClickLogoAway = false;
arrowBobTimer = 0;
currentPhraseLength = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trigger unclick

didClick = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define states

define_positions();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trigger click event

didClick = true;
instance_create(mouse_x, mouse_y, objClick);
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw UI elements

draw_set_alpha(1);
define_graphics();

// Phrases
if (instance_exists(objBear)) {
    if (objBear.showPhrases) {
        currentPhrase = ds_list_find_value(objBear.phrases, objBear.phraseIndex);
        if (currentPhrase != undefined) {
            if (currentPhraseLength &lt; string_length(currentPhrase)) {
                currentPhraseLength += 0.5;
            }
        
            draw_set_alpha(1);
            draw_set_color(c_black);
            draw_rectangle(0, 0, 128, 14, false);
            draw_set_color(c_white);
            
            var actualPhrase = string_copy(currentPhrase, 0, ceil(currentPhraseLength));
            var isGreyText = string_char_at(currentPhrase, 0) == '&amp;';
            
            if (isGreyText) {
                draw_set_color(make_color_rgb(132, 126, 135));
                actualPhrase = string_replace(actualPhrase, '&amp;', '');
            }
            
            draw_set_halign(fa_left);
            draw_set_valign(fa_center);
            draw_set_font(fntMain);
            draw_text_transformed(2.5, 6, actualPhrase, 0.5, 0.5, 0);
            
            arrowBobTimer += 0.05;
            var arrowOffset = 10;
            if (arrowBobTimer mod 2 &gt;= 1) {
                arrowOffset = 11;
            }
            draw_sprite(sprDialogueArrow, 0, 125, arrowOffset);
        }
    }
}

// Cursor
draw_sprite_ext(cursorSprite, 0, mouse_x, mouse_y, 1, 1, cursorAngle, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG: Draw zones

if (isDebugMode) {

    draw_set_alpha(0.5);
    
    for (var i = 0; i &lt; ds_list_size(transitionZones); i += 1) {
        var zone = ds_list_find_value(transitionZones, i);
        draw_set_color(c_red);
        draw_rectangle(zone[0], zone[1], zone[2], zone[3], false);
    }
    
    for (var i = 0; i &lt; ds_list_size(clickZones); i += 1) {
        var zone = ds_list_find_value(clickZones, i);
        draw_set_color(c_lime);
        draw_rectangle(zone[0], zone[1], zone[2], zone[3], false);
    }
    
    draw_set_alpha(1);
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG: Restart game

if (isDebugMode) {
    game_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
